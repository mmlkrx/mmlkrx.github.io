<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[not a newspaper]]></title>
  <link href="https://mmlkrx.github.io/atom.xml" rel="self"/>
  <link href="https://mmlkrx.github.io/"/>
  <updated>2014-07-21T08:48:59-04:00</updated>
  <id>https://mmlkrx.github.io/</id>
  <author>
    <name><![CDATA[Matthias Michael Loker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Content Delivery Networks Are Important]]></title>
    <link href="https://mmlkrx.github.io/blog/2014/07/20/why-content-delivery-networks-are-important/"/>
    <updated>2014-07-20T19:46:50-04:00</updated>
    <id>https://mmlkrx.github.io/blog/2014/07/20/why-content-delivery-networks-are-important</id>
    <content type="html"><![CDATA[<p>At the FlatironSchool, we are currently learning about JavaScript and jQuery. Since we aren’t yet building our own apps from scratch, we&rsquo;re usually given a template.</p>

<p>I took a closer look at one of the templates and will explain the following two lines, which are typically found at the bottom of your index page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span><span class="nb">window</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;script src=&quot;js/jquery-1.8.0.min.js&quot;&gt;&lt;\/script&gt;&#39;</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Line 1 in our code requires jQery from Googles CDN.</p>

<p>Line 2 basically says <em>&ldquo;If you can&rsquo;t reach Google load the local version&rdquo;.</em></p>

<p>This got me thinking. Why do we even need a CDN if we have a local version any ways?</p>

<p>Well, as it turns out, there are a number of reasons why this can be important&hellip;</p>

<h3>What is a content delivery network?</h3>

<blockquote><p>A Content Delivery Network refers to a large network of servers deployed across multiple networks in several data centers, often geographically distributed.</p></blockquote>

<p>Content Delivery Networks are all over the web. You use them every day when downloading files from Dropbox, or watching Orange Is the New Black on Netflix.</p>

<p>But apart from big consumer applications, they also play an important role in our day-to-day applications.</p>

<h2>Three reasons why you should use a CDN for your code:</h2>

<h3>1. Low latency</h3>

<p>When using a professional content delivery provider, there is a much higher chance of one of their servers being geographically close to your user. This may not be the case when you host your website on your own server.</p>

<p>As a result, content will be loaded faster.</p>

<h3>2. Higher chance of having a cache-match</h3>

<p>Static files like the jQuery library are cachable. Google will try and store them for up to one year in your computer. The more companies use their CDN to deliver jQuery, the higher the chances are that your user already has jQuery in their cache and does not require to download it at all.</p>

<h3>3. Increased parallelism</h3>

<p>Browsers typically limit the number of connections that can be made to any given site. Using a CDN will allow your users to download more of your local content in parallel. This in turn will increase the speed at which your app is up and running.</p>

<h3>Conclusion</h3>

<p>You may have noticed that all the stated reasons help increasing the speed of your app. Well, speed these days is important and every milisecond counts.</p>

<p>People aren&rsquo;t patient so you should try and not only keep your code as clean and fast as possible, but also choose best practices over where to host your files and libraries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Loose Guide to Deploying a Sinatra App on Heroku for Intermediate Beginners Using Bootstrap for Styling]]></title>
    <link href="https://mmlkrx.github.io/blog/2014/07/06/the-loose-guide-to-deploying-a-sinatra-app-on-heroku-for-intermediate-beginners-using-bootstrap-for-styling/"/>
    <updated>2014-07-06T23:03:45-04:00</updated>
    <id>https://mmlkrx.github.io/blog/2014/07/06/the-loose-guide-to-deploying-a-sinatra-app-on-heroku-for-intermediate-beginners-using-bootstrap-for-styling</id>
    <content type="html"><![CDATA[<h3>Introduction:</h3>

<p>If you want to get your feet wet in actually creating an application that lives on the web, this is the guide you’re looking for. It will take you from start to finish and only assumes you already have an idea. The following tools will be covered:</p>

<ul>
<li>Sinatra</li>
<li>Heroku</li>
<li>Git &amp; Github team workflow</li>
<li>Bootstrap</li>
</ul>


<p>If at any point you don’t understand what’s going on, I’m sorry, but I can’t help you. After all, this is only a loose guide. Our example application will be a simple search app that scrapes reddit.</p>

<h3>Before we start:</h3>

<p>When thinking about what to do next, or how to approach a problem/feature, keep in mind the following principles:</p>

<ul>
<li>single responsibility</li>
<li>make it work, make it right, make it fast</li>
<li>form follows function</li>
</ul>


<p>We are building a single responsibility app. Sure you can think about features and fancy stuff to add to it, but right now our goal is to deploy something.</p>

<h3>Basic outline of the process:</h3>

<ol>
<li>Think about what your app will do</li>
<li>Write down your conclusions</li>
<li>Set up the initial file structure</li>
<li>Start working</li>
<li>Finishing touches and troubleshooting</li>
<li>Deploy to Heroku</li>
</ol>


<p>Let’s get into it!</p>

<h3>1. Think about what your app will do</h3>

<p>Your guiding principles here should be the single responsibility principle and working from the outside in. This means you should first write down a general list of things that your app has to do. In our case:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>search reddit/ELI5
</span><span class='line'>choose best match
</span><span class='line'>choose best answer
</span><span class='line'>display best three answers</span></code></pre></td></tr></table></div></figure>


<p>As you can see, this is quite simple. During this process, questions like “Should I use an API or just crawl?” have to be addressed and answered. Again, keep in mind that you want to make it work first and foremost. Don’t obsess with API’s or gems that confuse you if you already have a tool you know how to use.</p>

<h3>2. Write down your conclusions:</h3>

<p>Now put those answers to paper and be a little more precise. Start looking at some of the details but don’t get caught up in them just yet.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>get user input
</span><span class='line'>search http://www.reddit.com/r/explainlikeimfive/search?q=  user.input  &restrict_sr=on&sort=relevance&t=all
</span><span class='line'>open first search result with title explained
</span><span class='line'>get the first answer with the highest upvotes
</span><span class='line'>display that on our awesome web app</span></code></pre></td></tr></table></div></figure>


<p>At this point you should already have a more concise idea of how you’re going to do things and you can already start thinking about division of labor.</p>

<p>Who should build the backend?
Who should do the crawling?
Who should set up the repo?
Who should style and create your views?
Who writes tests?</p>

<p>After those questions are answered, it’s finally time to get your hands dirty!</p>

<h3>3. Set up the initial file structure:</h3>

<p>At this point you should know enough about what your app has to do to be able to quickly set up your file structure and require your dependencies.</p>

<p>Don’t forget to git init a new repo and set up a remote so your teammates can fork it.</p>

<p>Keep in mind that when we want to deploy to Heroku later, we have to use Bundler and a Gemfile. A typical structure could look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root/
</span><span class='line'>├── Gemfile
</span><span class='line'>├── Gemfile.lock
</span><span class='line'>├── README.md
</span><span class='line'>├── Rakefile
</span><span class='line'>├── app
</span><span class='line'>│ ├── controllers
</span><span class='line'>│ │ └── app_controller.rb
</span><span class='line'>│ └── views
</span><span class='line'>│   └── layout.erb
</span><span class='line'>│   └── index.erb
</span><span class='line'>├── config
</span><span class='line'>│ └── environment.rb
</span><span class='line'>├── config.ru
</span><span class='line'>├── public
</span><span class='line'>│ └── stylesheets
</span><span class='line'>└── spec
</span><span class='line'>├── controllers
</span><span class='line'>├── features
</span><span class='line'>└── spec_helper.rb</span></code></pre></td></tr></table></div></figure>


<p>Your <code>Gemfile</code> could look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;http://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;shotgun&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rake&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rspec&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;thin&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;require_all&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rack-test&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your <code>environment.rb</code> file could look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span><span class='line'><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s2">&quot;../app/controllers&quot;</span><span class="p">,</span> <span class="s2">&quot;*.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span><span class="p">}</span>
</span><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s2">&quot;../app/models&quot;</span><span class="p">,</span> <span class="s2">&quot;*.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your <code>config.ru</code> <em>has to</em> look something like this. Later we’ll get to why it has to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./config/environment.rb&#39;</span>
</span><span class='line'><span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Static</span><span class="p">,</span> <span class="ss">:urls</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;/css&#39;</span><span class="p">,</span> <span class="s1">&#39;/js&#39;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:root</span> <span class="o">=&gt;</span> <span class="s1">&#39;public&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="no">AppController</span>
</span></code></pre></td></tr></table></div></figure>


<p>Download <a href="http://getbootstrap.com/">Bootstrap</a> and put it in it’s rightful place</p>

<h3>4. Start working</h3>

<p>At this point you should have pushed the initial setup of files and dependencies to github so that your teammates can fork your repo and get started on their own respective branches/features.</p>

<h4>A few tips for using git correctly:</h4>

<ul>
<li>Everyone in the team should work on feature branches</li>
<li>Once a feature branch is developed:

<ul>
<li>rebase master into it</li>
<li>merge the branch into master (switch to branch master before merging)</li>
<li>push to your remote repository</li>
<li>submit a pull request to upstream master from github</li>
</ul>
</li>
<li>You should commit often and leave precise comments</li>
</ul>


<p>Talk to each other every now and then to make sure the different parts of your app will also be able to talk to each other later.</p>

<h4>How to use Bootstrap in the real world</h4>

<p>CSS has many many different selectors and ways to style your websites, ok! Just stick with a neat little framework called google&amp;bootstrap. If &ndash; like me &ndash; you don’t know ____ about bootstrap and css and all that stuff, all you need to do is have these two tabs open:</p>

<p><a href="http://getbootstrap.com/css/">Bootstrap Documentation</a>&amp;<a href="https://www.google.com/">Google</a></p>

<p>The bootstrap documentation will give a few good ideas on elements and their styles, but can be overwhelming. Lucky for us, bootstrap is a popular framework and you can find a lot of your answers on the web.</p>

<p>Just google what you want to do, then paste whatever bootstrap html you can find, and see what it looks like in the browser. Keep what you like and get rid of what you don’t like. Rinse and repeat, it’s really that simple.</p>

<h3>5. Finishing touches and troubleshooting</h3>

<p>After everyone has submitted their pull requests and you’ve merged everything into master, it is time to put the finishing touches on your app. This means fixing little bugs or formatting issues and making sure all your files are required properly.</p>

<p>This should really not take too long since hopefully, you and your teammates were talking to each other, and stuck to the agreed formats.</p>

<p>Keep in mind that rackup will only work correctly with your styles if you tell it where to look for your css directory. You can do that in the <code>config.ru</code> like above.</p>

<p>Alternatively you could use shotgun which will work just fine, but avoiding this will cause problems with Heroku later.</p>

<h3>6. Deploy to Heroku</h3>

<p>If you’ve set up your Gemfile and your config.ru correctly, deploying to Heroku should be a breeze.</p>

<ol>
<li>Download the <a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a></li>
<li><a href="https://www.heroku.com">Sign up</a> for Heroku</li>
<li>From your master branch run

<ul>
<li><code>git remote add heroku &lt;address&gt;</code></li>
<li><code>git push heroku master</code></li>
</ul>
</li>
<li>Watch it compile and copy the resulting link into the browser to see your web app live!</li>
</ol>


<p>Yes, it is really that simple. If you want to change the name of your Heroku app because blazing-mist-4652 isn’t up your alley, do it from the command line using <code>heroku apps:rename newname</code>.</p>

<p>If you run into problems with your stylesheets, it is most likely for the same reasons rackup didn’t work. Heroku can’t find them. Take a look at the <code>config.ru</code> to change that.</p>

<h3>Enjoy shipping your app</h3>

<p><a href="http://get-an-answer.herokuapp.com/" target="_blank">www.get-an-answer.com</a></p>

<p>Nice job on that app. From here you can feel free to add more functionality beyond the bare basics to make your app much sophisticated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Learn When Programming]]></title>
    <link href="https://mmlkrx.github.io/blog/2014/06/20/how-to-learn-when-programming/"/>
    <updated>2014-06-20T09:12:24-04:00</updated>
    <id>https://mmlkrx.github.io/blog/2014/06/20/how-to-learn-when-programming</id>
    <content type="html"><![CDATA[<p>Part 1</p>

<p>At the Flatiron School, it’s all about trying to fit an elephant inside a fridge. Your brain being the fridge and Ruby plus everything else being the Elephant. Needless to say, it can feel a little bit crammed in there.</p>

<p>But wait, this is a good thing! It means you’re expanding your comfort zone and actually learning something. Here’s why:</p>

<h3>Novelty &ndash; a two-edged sword</h3>

<p>Novelty can both be good and bad. You’re being awarded pleasure for learning, while feeling the discomfort of not knowing what to do. It’s confusing.</p>

<p>Here’s the scary part:</p>

<p>Everybody loves novelty. If your job doesn’t challenge you in new ways, it will only keep on dragging you down until you eventually quit. This is a no-brainer. But that’s just part of the story…</p>

<h3>Discomfort and Emotions</h3>

<p>Wouldn’t it be nice if the discomfort would actually feel good too? Well, chinese scientists have discovered that due to the nature of the design of our brain, this is not possible. Sorry.</p>

<p>But wait, how about a workaround? Yes, now we’re talking. But before we go into that, let’s inspect discomfort in a little bit more detail:</p>

<p>What I mean by discomfort, are generally negative emotions. Feeling lost, hopeless, angry, annoyed or frustrated are all pieces of the pie. So why do we feel them? Because they are necessary.</p>

<p>Think about it, when you were a little kid and put your hand on that stove for the first time, you needn’t make that mistake twice. You see, <em>linking experiences to negative emotions will make them stick better</em>.</p>

<p>And that’s really all there is to it. Read it again. It sounds simple, because it is!</p>

<h3>But what about programming?</h3>

<p>Persisting and struggling with concepts you don’t understand will assist you in learning them. Simply stated, it may be more painful, but you will gain a deeper understanding.</p>

<p>To make a point, when I was working through the collections practice lab, it took me a full four hours to work through one method! But I discovered and learned a lot! Taking on pigeon organizer afterwards felt as easy as binge-watching a season of Game of Thrones.</p>

<h3>So here is what you should do:</h3>

<p>Use this piece of information as a framework to help putting things into perspective. The next time when you feel really frustrated, don’t take the easy way and look at someone elses code.</p>

<p>Struggle with your own code first, feel frustrated, browse the Array Ruby documentation for the hundredths time. Stay with it. Remember that all this frustration will help you in the long run.</p>

<p>No pain, no gain.</p>
]]></content>
  </entry>
  
</feed>
